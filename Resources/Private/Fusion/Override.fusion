prototype(Neos.Form.Builder:Form) {
    renderingOptions {
        submitButtonLabel = ${q(node).property('submitLabel')}
    }
}

prototype(Neos.Form.Builder:FormElement.Definition) {
    properties {
        hideLabels = ${q(node).property('hideLabels')}
    }
}

prototype(Neos.Form.Builder:NodeBasedForm) < prototype(Neos.Neos:ContentComponent) {

    @context.nodeBasedForm = Neos.Form.Builder:Form {
        @context.formNode = ${q(node).closest('[instanceof Neos.Form.Builder:NodeBasedForm]').get(0)}
        @context.formFusionPath = ${this.path}
        identifier = ${formNode.properties.identifier ? formNode.properties.identifier : 'form-' + formNode.identifier}
        presetName = ${formNode.properties.preset ? formNode.properties.preset : 'default'}
        formElementType = ${formNode.context.inBackend ? 'Neos.Form:FormEditMode' : 'Neos.Form:Form'}

        renderCallbacks.formElementWrapping = Neos.Form.Builder:FormElementWrapping {
            @if.isInBackend = ${formNode.context.inBackend}
        }

        firstPage {
            label = ${formNode.properties.label}
            renderingOptions._node = ${formNode}
            renderingOptions._fusionPath = ${formFusionPath}
            elements = Neos.Form.Builder:NodeBasedElementCollection {
                collection = ${q(formNode).children('elements').children()}
            }
        }
        furtherPages = Neos.Form.Builder:NodeBasedPageCollection {
            collection = ${q(formNode).children('furtherPages').children()}
        }
        finishers = Neos.Form.Builder:NodeBasedFinisherCollection {
            collection = ${q(formNode).children('finishers').children()}
        }
        @process.contentElementWrapping = Neos.Neos:ContentElementWrapping {
            additionalAttributes {
                'data-_neos-form-builder-type' = ${formNode.nodeType.name}
            }
        }
    }

    renderer = afx`
        <NeosRulez.Bootstrap:Content.AbstractContent>
            {nodeBasedForm}
        </NeosRulez.Bootstrap:Content.AbstractContent>
    `

    @cache {
        context {
            1 = 'node'
            2 = 'documentNode'
            3 = 'site'
        }
    }
}

prototype(Neos.NodeTypes.Navigation:Navigation) < prototype(Neos.Neos:ContentComponent) {

    navigation = Neos.Neos:Menu {
        templatePath = 'resource://Neos.NodeTypes.Navigation/Private/Templates/NodeTypes/Navigation.html'

        startingPoint = ${q(node).property('startingPoint') ? q(node).property('startingPoint') : documentNode}

        itemCollection = ${Array.isEmpty(q(node).property('selection') ? q(node).property('selection') : {}) ? null : q(node).property('selection')}

        entryLevel = ${q(node).property('startLevel')}
        entryLevel.@process.1 = ${String.toInteger(value)}

        maximumLevels = ${q(node).property('maximumLevels')}
        maximumLevels.@process.1 = ${String.toInteger(value)}

        attributes.class.@process < prototype(Neos.Neos:Content).attributes.class.@process

        active.attributes = Neos.Fusion:Attributes {
            class = 'active'
        }
        current.attributes = Neos.Fusion:Attributes {
            class = 'current'
        }
        normal.attributes = Neos.Fusion:Attributes {
            class = 'normal'
        }

        node = ${node}

        @process.contentElementWrapping = Neos.Neos:ContentElementWrapping

        @cache {
            mode = 'cached'
            entryIdentifier {
                documentNode = ${documentNode}
                node = ${node}
            }
            entryTags {
                1 = ${Neos.Caching.nodeTypeTag('Neos.Neos:Document', node)}
                2 = ${Neos.Caching.nodeTag(node)}
            }
        }
    }

    renderer = afx`
        <NeosRulez.Bootstrap:Content.AbstractContent>
            {props.navigation}
        </NeosRulez.Bootstrap:Content.AbstractContent>
    `
}